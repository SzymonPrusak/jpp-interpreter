-- File generated by the BNF Converter (bnfc 2.9.4).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Gram.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Gram.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: Gram.Abs.Ident -> Result
transIdent x = case x of
  Gram.Abs.Ident string -> failure x

transPrimType :: Show a => Gram.Abs.PrimType' a -> Result
transPrimType x = case x of
  Gram.Abs.PTBool _ -> failure x
  Gram.Abs.PTString _ -> failure x
  Gram.Abs.PTInt _ -> failure x

transBoolLit :: Show a => Gram.Abs.BoolLit' a -> Result
transBoolLit x = case x of
  Gram.Abs.BTrue _ -> failure x
  Gram.Abs.BFalse _ -> failure x

transTypeMod :: Show a => Gram.Abs.TypeMod' a -> Result
transTypeMod x = case x of
  Gram.Abs.TMNone _ -> failure x
  Gram.Abs.TMReadonly _ -> failure x

transTypeName :: Show a => Gram.Abs.TypeName' a -> Result
transTypeName x = case x of
  Gram.Abs.TNPrim _ primtype -> failure x
  Gram.Abs.TNArr _ arraytype -> failure x
  Gram.Abs.TNTuple _ tupletype -> failure x

transTypeDef :: Show a => Gram.Abs.TypeDef' a -> Result
transTypeDef x = case x of
  Gram.Abs.TypeDefin _ typename typemod -> failure x

transArrayType :: Show a => Gram.Abs.ArrayType' a -> Result
transArrayType x = case x of
  Gram.Abs.TArrayType _ typename -> failure x

transTupleType :: Show a => Gram.Abs.TupleType' a -> Result
transTupleType x = case x of
  Gram.Abs.TTupleType _ tuplesubtypes -> failure x

transTupleSubType :: Show a => Gram.Abs.TupleSubType' a -> Result
transTupleSubType x = case x of
  Gram.Abs.TupleSType _ typename -> failure x

transProg :: Show a => Gram.Abs.Prog' a -> Result
transProg x = case x of
  Gram.Abs.Program _ fundefs -> failure x

transFunDef :: Show a => Gram.Abs.FunDef' a -> Result
transFunDef x = case x of
  Gram.Abs.FunDefin _ funret ident funparams stmtblock -> failure x

transFunRet :: Show a => Gram.Abs.FunRet' a -> Result
transFunRet x = case x of
  Gram.Abs.FRType _ typename -> failure x
  Gram.Abs.FRVoid _ -> failure x

transFunParam :: Show a => Gram.Abs.FunParam' a -> Result
transFunParam x = case x of
  Gram.Abs.FunPar _ typedef ident -> failure x

transStmtBlock :: Show a => Gram.Abs.StmtBlock' a -> Result
transStmtBlock x = case x of
  Gram.Abs.StmtBlck _ blockstmts -> failure x

transBlockStmt :: Show a => Gram.Abs.BlockStmt' a -> Result
transBlockStmt x = case x of
  Gram.Abs.BSStmt _ stmt -> failure x
  Gram.Abs.BSFunDef _ fundef -> failure x

transArrayInit :: Show a => Gram.Abs.ArrayInit' a -> Result
transArrayInit x = case x of
  Gram.Abs.ArrInit _ typename exp -> failure x

transArrayConstruction :: Show a => Gram.Abs.ArrayConstruction' a -> Result
transArrayConstruction x = case x of
  Gram.Abs.ArrConstr _ constrels -> failure x

transTupleConstruction :: Show a => Gram.Abs.TupleConstruction' a -> Result
transTupleConstruction x = case x of
  Gram.Abs.TupleConstr _ constrels -> failure x

transConstrEl :: Show a => Gram.Abs.ConstrEl' a -> Result
transConstrEl x = case x of
  Gram.Abs.ConstrElem _ exp -> failure x

transArrayAccess :: Show a => Gram.Abs.ArrayAccess' a -> Result
transArrayAccess x = case x of
  Gram.Abs.ArrAcc _ ident exp -> failure x

transCompOp :: Show a => Gram.Abs.CompOp' a -> Result
transCompOp x = case x of
  Gram.Abs.COEq _ -> failure x
  Gram.Abs.CONeq _ -> failure x
  Gram.Abs.COGt _ -> failure x
  Gram.Abs.COLt _ -> failure x
  Gram.Abs.COGe _ -> failure x
  Gram.Abs.COLe _ -> failure x

transAddOp :: Show a => Gram.Abs.AddOp' a -> Result
transAddOp x = case x of
  Gram.Abs.AOPlus _ -> failure x
  Gram.Abs.AOMinus _ -> failure x

transMulOp :: Show a => Gram.Abs.MulOp' a -> Result
transMulOp x = case x of
  Gram.Abs.MOMul _ -> failure x
  Gram.Abs.MODiv _ -> failure x
  Gram.Abs.MOMod _ -> failure x

transIntLiteral :: Show a => Gram.Abs.IntLiteral' a -> Result
transIntLiteral x = case x of
  Gram.Abs.LInt _ integer -> failure x
  Gram.Abs.LNInt _ integer -> failure x

transExp :: Show a => Gram.Abs.Exp' a -> Result
transExp x = case x of
  Gram.Abs.EInt _ intliteral -> failure x
  Gram.Abs.EString _ string -> failure x
  Gram.Abs.EBool _ boollit -> failure x
  Gram.Abs.EVarRef _ ident -> failure x
  Gram.Abs.EArrInit _ arrayinit -> failure x
  Gram.Abs.EArrConstr _ arrayconstruction -> failure x
  Gram.Abs.ETupleConstr _ tupleconstruction -> failure x
  Gram.Abs.EArrAcc _ arrayaccess -> failure x
  Gram.Abs.EFunCall _ funcall -> failure x
  Gram.Abs.EMul _ exp1 mulop exp2 -> failure x
  Gram.Abs.EAdd _ exp1 addop exp2 -> failure x
  Gram.Abs.EComp _ exp1 compop exp2 -> failure x
  Gram.Abs.EAnd _ exp1 exp2 -> failure x
  Gram.Abs.EOr _ exp1 exp2 -> failure x

transVarAssign :: Show a => Gram.Abs.VarAssign' a -> Result
transVarAssign x = case x of
  Gram.Abs.AVar _ ident exp -> failure x

transArrAccAssign :: Show a => Gram.Abs.ArrAccAssign' a -> Result
transArrAccAssign x = case x of
  Gram.Abs.AArrAcc _ arrayaccess exp -> failure x

transDeclA :: Show a => Gram.Abs.DeclA' a -> Result
transDeclA x = case x of
  Gram.Abs.DeclASingl _ typedef ident -> failure x
  Gram.Abs.DeclATuple _ declas -> failure x

transFunCall :: Show a => Gram.Abs.FunCall' a -> Result
transFunCall x = case x of
  Gram.Abs.FuncCall _ ident funargs -> failure x

transFunArg :: Show a => Gram.Abs.FunArg' a -> Result
transFunArg x = case x of
  Gram.Abs.FuncArg _ exp -> failure x

transIfBranch :: Show a => Gram.Abs.IfBranch' a -> Result
transIfBranch x = case x of
  Gram.Abs.IfBr _ exp stmt -> failure x

transIfElseBranch :: Show a => Gram.Abs.IfElseBranch' a -> Result
transIfElseBranch x = case x of
  Gram.Abs.IfElBr _ exp stmtblock stmt -> failure x

transLoopWhile :: Show a => Gram.Abs.LoopWhile' a -> Result
transLoopWhile x = case x of
  Gram.Abs.LWhile _ exp stmt -> failure x

transLoopFor :: Show a => Gram.Abs.LoopFor' a -> Result
transLoopFor x = case x of
  Gram.Abs.LFor _ varassign exp stmt -> failure x

transStmt :: Show a => Gram.Abs.Stmt' a -> Result
transStmt x = case x of
  Gram.Abs.SEmpty _ -> failure x
  Gram.Abs.SDecl _ typedef ident -> failure x
  Gram.Abs.SAssign _ varassign -> failure x
  Gram.Abs.SArrAssign _ arraccassign -> failure x
  Gram.Abs.SDeclAssign _ decla exp -> failure x
  Gram.Abs.SFunCall _ funcall -> failure x
  Gram.Abs.SIf _ ifbranch -> failure x
  Gram.Abs.SIfEl _ ifelsebranch -> failure x
  Gram.Abs.SLoopWhile _ loopwhile -> failure x
  Gram.Abs.SLoopFor _ loopfor -> failure x
  Gram.Abs.SReturn _ -> failure x
  Gram.Abs.SReturnVal _ exp -> failure x
  Gram.Abs.SContinue _ -> failure x
  Gram.Abs.SBreak _ -> failure x
  Gram.Abs.SSubBlock _ stmtblock -> failure x
