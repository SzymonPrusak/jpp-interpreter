token       PrimType    {"bool"} | {"string"} | {"int"} | {"void"} ;
token       Bool {"true"} | {"false"} ;


entrypoints Prog ;


TMNone.     TypeMod ::= ;
TMReadonly. TypeMod ::= "readonly" ;
TNPrim.     TypeName ::= PrimType ;
TNArr.      TypeName ::= ArrayType ;
TNTuple.    TypeName ::= TupleType ;
TypeDef.    TypeDef ::= TypeMod TypeName ;

ArrType.    ArrayType ::= TypeName "[]" ;
TupleType.  TupleType ::= "(" [TupleSubType] ")" ;
TupleSType. TupleSubType ::= TypeName ;
separator   nonempty TupleSubType "," ;

Prog.       Prog ::= [FunDef] ;

FunDef.     FunDef ::= "fun" TypeName Ident "(" [FunParam] ")" StmtBlock;
terminator  FunDef "" ;

FunParam.   FunParam ::= TypeDef Ident ; 
separator   FunParam "," ;

StmtBlock.  StmtBlock ::= "{" [BlockStmt] "}" ;
BSStmt.     BlockStmt ::= Stmt ;
BSFunDef.   BlockStmt ::= FunDef ;
terminator  BlockStmt "" ;

ArrInit.    ArrayInit ::= "new" TypeName "[" Assignable "]" ;
ArrConstr.  ArrayConstruction ::= "[" [ConstrEl] "]" ;
TupleConstr. TupleConstruction ::= "(" [ConstrEl] ")" ;
ConstrEl.   ConstrEl ::= Assignable ;
separator   nonempty ConstrEl "," ;

ArrAcc.     ArrayAccess ::= Ident "[" Assignable "]" ;

AInt.       Assignable ::= Integer ;
AString.    Assignable ::= String ;
ABool.      Assignable ::= Bool ;
AVarRef.    Assignable ::= Ident ;
AArrInit.   Assignable ::= ArrayInit ;
AArrConstr. Assignable ::= ArrayConstruction ;
ATupleConstr. Assignable ::= TupleConstruction ;
AArrAcc.    Assignable ::= ArrayAccess ;
AFunCall.   Assignable ::= FunCall ;

VarAssign.  VarAssign ::= Ident "=" Assignable ;

DeclASingl. DeclA ::= TypeDef Ident;
DeclATuple. DeclA ::= "deconstr" "(" [DeclA] ")" ;
separator   nonempty DeclA "," ;

FunCall.    FunCall ::= Ident "(" [FunArg] ")" ;
FunArg.     FunArg ::= Assignable ;
separator   FunArg "," ;

IfBranch.   IfBranch ::= "if" "(" Assignable ")" Stmt ;
IfElBranch. IfElseBranch ::= "if" "(" Assignable ")" StmtBlock "else" Stmt ;

LoopWhile.  LoopWhile ::= "while" "(" Assignable ")" Stmt ;
LoopFor.    LoopFor ::= "for" "(" VarAssign "to" Assignable ")" Stmt ;

SEmpty.     Stmt ::= ";" ;
SDecl.      Stmt ::= TypeDef Ident ";" ;
SAssign.    Stmt ::= VarAssign ";" ;
SDeclAssign. Stmt ::= DeclA "=" Assignable ";" ;
SFunCall.   Stmt ::= FunCall ";" ;
SIf.        Stmt ::= IfBranch ;
SIfEl.      Stmt ::= IfElseBranch ;
SLoopWhile. Stmt ::= LoopWhile ;
SLoopFor.   Stmt ::= LoopFor ;
SReturn.    Stmt ::= "return" ";" ;
SReturnVal. Stmt ::= "return" Assignable ";" ;
SContinue.  Stmt ::= "continue" ";" ;
SBreak.     Stmt ::= "break" ";" ;
SSubBlock.  Stmt ::= StmtBlock ;
terminator  Stmt "" ;
